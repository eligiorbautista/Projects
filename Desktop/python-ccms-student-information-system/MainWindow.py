
from PyQt6 import QtCore, QtGui, QtWidgets
from regex import F


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1025, 562)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/ccmslogo.jpg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-color:black\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 1041, 561))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.frame.setFont(font)
        self.frame.setStyleSheet("background-color:rgb(108, 108, 108)")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(10, 10, 271, 81))
        self.frame_2.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_2.setStyleSheet("QFrame{background-color:rgb(243, 243, 243);border:1px solid black}")
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label = QtWidgets.QLabel(self.frame_2)
        self.label.setGeometry(QtCore.QRect(74, 10, 191, 61))
        self.label.setMinimumSize(QtCore.QSize(0, 0))
        self.label.setMaximumSize(QtCore.QSize(999, 999))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color:rgb(25, 39, 65);border:none")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.frame_2)
        self.label_2.setGeometry(QtCore.QRect(10, 10, 61, 61))
        self.label_2.setMinimumSize(QtCore.QSize(0, 0))
        self.label_2.setMaximumSize(QtCore.QSize(999, 999))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("border:none")
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("images/ccmslogo.jpg"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setGeometry(QtCore.QRect(10, 100, 271, 451))
        self.frame_3.setStyleSheet("background-color:rgb(235, 235, 235);border:1px solid black")
        self.frame_3.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_3.setObjectName("frame_3")
        self.ButtonViewPage = QtWidgets.QPushButton(self.frame_3)
        self.ButtonViewPage.setGeometry(QtCore.QRect(40, 30, 201, 35))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ButtonViewPage.sizePolicy().hasHeightForWidth())
        self.ButtonViewPage.setSizePolicy(sizePolicy)
        self.ButtonViewPage.setMinimumSize(QtCore.QSize(201, 35))
        self.ButtonViewPage.setMaximumSize(QtCore.QSize(201, 35))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ButtonViewPage.setFont(font)
        self.ButtonViewPage.setStyleSheet("background-color:rgb(25, 39, 65);color:white")
        self.ButtonViewPage.setObjectName("ButtonViewPage")
        self.ButtonAddPage = QtWidgets.QPushButton(self.frame_3)
        self.ButtonAddPage.setGeometry(QtCore.QRect(40, 70, 201, 35))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ButtonAddPage.sizePolicy().hasHeightForWidth())
        self.ButtonAddPage.setSizePolicy(sizePolicy)
        self.ButtonAddPage.setMinimumSize(QtCore.QSize(201, 35))
        self.ButtonAddPage.setMaximumSize(QtCore.QSize(201, 35))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ButtonAddPage.setFont(font)
        self.ButtonAddPage.setStyleSheet("background-color:rgb(25, 39, 65);color:white")
        self.ButtonAddPage.setObjectName("ButtonAddPage")
        self.ButtonUpdatePage = QtWidgets.QPushButton(self.frame_3)
        self.ButtonUpdatePage.setGeometry(QtCore.QRect(40, 110, 201, 35))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ButtonUpdatePage.sizePolicy().hasHeightForWidth())
        self.ButtonUpdatePage.setSizePolicy(sizePolicy)
        self.ButtonUpdatePage.setMinimumSize(QtCore.QSize(201, 35))
        self.ButtonUpdatePage.setMaximumSize(QtCore.QSize(201, 35))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ButtonUpdatePage.setFont(font)
        self.ButtonUpdatePage.setStyleSheet("background-color:rgb(25, 39, 65);color:white")
        self.ButtonUpdatePage.setObjectName("ButtonUpdatePage")
        self.ButtonDeletePage = QtWidgets.QPushButton(self.frame_3)
        self.ButtonDeletePage.setGeometry(QtCore.QRect(40, 150, 201, 35))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ButtonDeletePage.sizePolicy().hasHeightForWidth())
        self.ButtonDeletePage.setSizePolicy(sizePolicy)
        self.ButtonDeletePage.setMinimumSize(QtCore.QSize(201, 35))
        self.ButtonDeletePage.setMaximumSize(QtCore.QSize(201, 35))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ButtonDeletePage.setFont(font)
        self.ButtonDeletePage.setStyleSheet("background-color:rgb(25, 39, 65);color:white")
        self.ButtonDeletePage.setObjectName("ButtonDeletePage")
        self.ButtonViewProgramsPage = QtWidgets.QPushButton(self.frame_3)
        self.ButtonViewProgramsPage.setGeometry(QtCore.QRect(40, 190, 201, 35))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ButtonViewProgramsPage.sizePolicy().hasHeightForWidth())
        self.ButtonViewProgramsPage.setSizePolicy(sizePolicy)
        self.ButtonViewProgramsPage.setMinimumSize(QtCore.QSize(201, 35))
        self.ButtonViewProgramsPage.setMaximumSize(QtCore.QSize(201, 35))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ButtonViewProgramsPage.setFont(font)
        self.ButtonViewProgramsPage.setStyleSheet("background-color:rgb(25, 39, 65);color:white")
        self.ButtonViewProgramsPage.setObjectName("ButtonViewProgramsPage")
        self.stackedWidget = QtWidgets.QStackedWidget(self.frame)
        self.stackedWidget.setGeometry(QtCore.QRect(290, 10, 725, 541))
        self.stackedWidget.setStyleSheet("background-color:rgb(255, 255, 255);border:1px solid black")
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.label_3 = QtWidgets.QLabel(self.page)
        self.label_3.setGeometry(QtCore.QRect(170, 172, 541, 74))
        self.label_3.setMinimumSize(QtCore.QSize(0, 0))
        self.label_3.setMaximumSize(QtCore.QSize(999, 999))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color:rgb(25, 39, 65);border:none")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.page)
        self.label_4.setGeometry(QtCore.QRect(40, 151, 121, 121))
        self.label_4.setMinimumSize(QtCore.QSize(0, 0))
        self.label_4.setMaximumSize(QtCore.QSize(121, 121))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("border:none")
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap("images/ccmslogo.jpg"))
        self.label_4.setScaledContents(True)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.page)
        self.label_5.setGeometry(QtCore.QRect(170, 260, 495, 68))
        self.label_5.setMinimumSize(QtCore.QSize(0, 0))
        self.label_5.setMaximumSize(QtCore.QSize(999, 999))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color:rgb(25, 39, 65);border:none")
        self.label_5.setObjectName("label_5")
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.label_6 = QtWidgets.QLabel(self.page_2)
        self.label_6.setGeometry(QtCore.QRect(0, 0, 724, 81))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(38)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("background-color:rgb(19, 30, 50);color:white;border:1px solid black")
        self.label_6.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.frame_4 = QtWidgets.QFrame(self.page_2)
        self.frame_4.setGeometry(QtCore.QRect(0, 80, 724, 521))
        self.frame_4.setStyleSheet("border:1px solid black;background-color:rgb(235, 235, 235)")
        self.frame_4.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_4.setObjectName("frame_4")
        self.LineEditViewSearch = QtWidgets.QLineEdit(self.frame_4)
        self.LineEditViewSearch.setGeometry(QtCore.QRect(551, 20, 131, 20))
        self.LineEditViewSearch.setStyleSheet("border:1px solid black;background-color:white;color:black")
        self.LineEditViewSearch.setText("")
        self.LineEditViewSearch.setObjectName("LineEditViewSearch")
        self.ButtonViewSearch = QtWidgets.QPushButton(self.frame_4)
        self.ButtonViewSearch.setGeometry(QtCore.QRect(687, 19, 23, 22))
        self.ButtonViewSearch.setStyleSheet("background-color:rgb(177, 177, 177)")
        self.ButtonViewSearch.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/search.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.ButtonViewSearch.setIcon(icon1)
        self.ButtonViewSearch.setIconSize(QtCore.QSize(15, 15))
        self.ButtonViewSearch.setObjectName("ButtonViewSearch")
        self.ButtonViewAll = QtWidgets.QPushButton(self.frame_4)
        self.ButtonViewAll.setGeometry(QtCore.QRect(460, 19, 81, 22))
        self.ButtonViewAll.setStyleSheet("background-color:rgb(177, 177, 177)")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/team.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.ButtonViewAll.setIcon(icon2)
        self.ButtonViewAll.setIconSize(QtCore.QSize(15, 15))
        self.ButtonViewAll.setObjectName("ButtonViewAll")
        self.StudentsTable = QtWidgets.QTableWidget(self.frame_4)
        self.StudentsTable.setGeometry(QtCore.QRect(20, 50, 691, 393))
        self.StudentsTable.setStyleSheet("color:black;border:2px solid black;background-color:white")
        self.StudentsTable.setObjectName("StudentsTable")
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.frame_5 = QtWidgets.QFrame(self.page_3)
        self.frame_5.setGeometry(QtCore.QRect(0, 80, 724, 521))
        self.frame_5.setStyleSheet("border:1px solid black;background-color:rgb(200, 200, 200)")
        self.frame_5.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_5.setObjectName("frame_5")
        self.LineEditContact = QtWidgets.QLineEdit(self.frame_5)
        self.LineEditContact.setGeometry(QtCore.QRect(50, 170, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.LineEditContact.setFont(font)
        self.LineEditContact.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.LineEditContact.setPlaceholderText(" Contact No.")
        self.LineEditContact.setObjectName("LineEditContact")
        self.DateEditDateBirth = QtWidgets.QDateEdit(self.frame_5)
        self.DateEditDateBirth.setGeometry(QtCore.QRect(260, 220, 181, 20))
        self.DateEditDateBirth.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.DateEditDateBirth.setCalendarPopup(True)
        self.DateEditDateBirth.setDate(QtCore.QDate(2001, 1, 1))
        self.DateEditDateBirth.setObjectName("DateEditDateBirth")
        self.LineEditName = QtWidgets.QLineEdit(self.frame_5)
        self.LineEditName.setGeometry(QtCore.QRect(50, 130, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.LineEditName.setFont(font)
        self.LineEditName.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.LineEditName.setObjectName("LineEditName")
        self.TextEditAddress = QtWidgets.QTextEdit(self.frame_5)
        self.TextEditAddress.setGeometry(QtCore.QRect(50, 260, 621, 71))
        self.TextEditAddress.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.TextEditAddress.setObjectName("TextEditAddress")
        self.ComboBoxGender = QtWidgets.QComboBox(self.frame_5)
        self.ComboBoxGender.setGeometry(QtCore.QRect(260, 130, 181, 31))
        self.ComboBoxGender.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.ComboBoxGender.setObjectName("ComboBoxGender")
        self.ComboBoxGender.addItem("")
        self.ComboBoxGender.addItem("")
        self.ComboBoxGender.addItem("")
        self.label_12 = QtWidgets.QLabel(self.frame_5)
        self.label_12.setGeometry(QtCore.QRect(261, 206, 181, 11))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("border:none")
        self.label_12.setObjectName("label_12")
        self.LineEditAge = QtWidgets.QLineEdit(self.frame_5)
        self.LineEditAge.setGeometry(QtCore.QRect(260, 170, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.LineEditAge.setFont(font)
        self.LineEditAge.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.LineEditAge.setPlaceholderText(" Age")
        self.LineEditAge.setObjectName("LineEditAge")
        self.LineEditEmail = QtWidgets.QLineEdit(self.frame_5)
        self.LineEditEmail.setGeometry(QtCore.QRect(50, 210, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.LineEditEmail.setFont(font)
        self.LineEditEmail.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.LineEditEmail.setPlaceholderText(" Email")
        self.LineEditEmail.setObjectName("LineEditEmail")
        self.ComboBoxCourse = QtWidgets.QComboBox(self.frame_5)
        self.ComboBoxCourse.setGeometry(QtCore.QRect(490, 130, 181, 31))
        self.ComboBoxCourse.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.ComboBoxCourse.setObjectName("ComboBoxCourse")
        self.ComboBoxCourse.addItem("")
        self.ComboBoxSpecialTrack = QtWidgets.QComboBox(self.frame_5)
        self.ComboBoxSpecialTrack.setGeometry(QtCore.QRect(490, 170, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.ComboBoxSpecialTrack.setFont(font)
        self.ComboBoxSpecialTrack.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.ComboBoxSpecialTrack.setObjectName("ComboBoxSpecialTrack")
        self.ComboBoxSpecialTrack.addItem("")
        self.ComboBoxYearLevel = QtWidgets.QComboBox(self.frame_5)
        self.ComboBoxYearLevel.setGeometry(QtCore.QRect(490, 210, 181, 31))
        self.ComboBoxYearLevel.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.ComboBoxYearLevel.setObjectName("ComboBoxYearLevel")
        self.ComboBoxYearLevel.addItem("")
        self.ComboBoxYearLevel.addItem("")
        self.ComboBoxYearLevel.addItem("")
        self.ComboBoxYearLevel.addItem("")
        self.ComboBoxYearLevel.addItem("")
        self.ButtonRegister = QtWidgets.QPushButton(self.frame_5)
        self.ButtonRegister.setGeometry(QtCore.QRect(540, 340, 131, 22))
        self.ButtonRegister.setStyleSheet("background-color:rgb(177, 177, 177)")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/register.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.ButtonRegister.setIcon(icon3)
        self.ButtonRegister.setIconSize(QtCore.QSize(15, 15))
        self.ButtonRegister.setObjectName("ButtonRegister")
        self.ButtonCancelAdd = QtWidgets.QPushButton(self.frame_5)
        self.ButtonCancelAdd.setGeometry(QtCore.QRect(460, 340, 71, 22))
        self.ButtonCancelAdd.setStyleSheet("background-color:rgb(177, 177, 177)")
        self.ButtonCancelAdd.setIconSize(QtCore.QSize(15, 15))
        self.ButtonCancelAdd.setObjectName("ButtonCancelAdd")
        self.label_7 = QtWidgets.QLabel(self.page_3)
        self.label_7.setGeometry(QtCore.QRect(0, 0, 724, 81))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(38)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("background-color:rgb(19, 30, 50);color:white;border:1px solid black")
        self.label_7.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.stackedWidget.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.label_8 = QtWidgets.QLabel(self.page_4)
        self.label_8.setGeometry(QtCore.QRect(0, 0, 724, 81))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(38)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("background-color:rgb(19, 30, 50);color:white;border:1px solid black")
        self.label_8.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.frame_6 = QtWidgets.QFrame(self.page_4)
        self.frame_6.setGeometry(QtCore.QRect(0, 80, 724, 521))
        self.frame_6.setStyleSheet("border:1px solid black;background-color:rgb(200, 200, 200)")
        self.frame_6.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_6.setObjectName("frame_6")
        self.LineEditContact_2 = QtWidgets.QLineEdit(self.frame_6)
        self.LineEditContact_2.setGeometry(QtCore.QRect(50, 170, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.LineEditContact_2.setFont(font)
        self.LineEditContact_2.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.LineEditContact_2.setPlaceholderText(" Contact No.")
        self.LineEditContact_2.setObjectName("LineEditContact_2")
        self.LineEditName_2 = QtWidgets.QLineEdit(self.frame_6)
        self.LineEditName_2.setGeometry(QtCore.QRect(50, 130, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.LineEditName_2.setFont(font)
        self.LineEditName_2.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.LineEditName_2.setObjectName("LineEditName_2")
        self.TextEditAddress_2 = QtWidgets.QTextEdit(self.frame_6)
        self.TextEditAddress_2.setGeometry(QtCore.QRect(50, 260, 621, 71))
        self.TextEditAddress_2.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.TextEditAddress_2.setObjectName("TextEditAddress_2")
        self.ComboBoxGender_2 = QtWidgets.QComboBox(self.frame_6)
        self.ComboBoxGender_2.setGeometry(QtCore.QRect(260, 130, 181, 31))
        self.ComboBoxGender_2.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.ComboBoxGender_2.setObjectName("ComboBoxGender_2")
        self.ComboBoxGender_2.addItem("")
        self.ComboBoxGender_2.addItem("")
        self.ComboBoxGender_2.addItem("")
        self.LineEditAge_2 = QtWidgets.QLineEdit(self.frame_6)
        self.LineEditAge_2.setGeometry(QtCore.QRect(260, 170, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.LineEditAge_2.setFont(font)
        self.LineEditAge_2.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.LineEditAge_2.setPlaceholderText(" Age")
        self.LineEditAge_2.setObjectName("LineEditAge_2")
        self.LineEditEmail_2 = QtWidgets.QLineEdit(self.frame_6)
        self.LineEditEmail_2.setGeometry(QtCore.QRect(50, 210, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.LineEditEmail_2.setFont(font)
        self.LineEditEmail_2.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.LineEditEmail_2.setPlaceholderText(" Email")
        self.LineEditEmail_2.setObjectName("LineEditEmail_2")
        self.ComboBoxCourse_2 = QtWidgets.QComboBox(self.frame_6)
        self.ComboBoxCourse_2.setGeometry(QtCore.QRect(490, 130, 181, 31))
        self.ComboBoxCourse_2.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.ComboBoxCourse_2.setObjectName("ComboBoxCourse_2")
        self.ComboBoxCourse_2.addItem("")
        self.ComboBoxSpecialTrack_2 = QtWidgets.QComboBox(self.frame_6)
        self.ComboBoxSpecialTrack_2.setGeometry(QtCore.QRect(490, 170, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.ComboBoxSpecialTrack_2.setFont(font)
        self.ComboBoxSpecialTrack_2.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.ComboBoxSpecialTrack_2.setObjectName("ComboBoxSpecialTrack_2")
        self.ComboBoxSpecialTrack_2.addItem("")
        self.ComboBoxYearLevel_2 = QtWidgets.QComboBox(self.frame_6)
        self.ComboBoxYearLevel_2.setGeometry(QtCore.QRect(490, 210, 181, 31))
        self.ComboBoxYearLevel_2.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.ComboBoxYearLevel_2.setObjectName("ComboBoxYearLevel_2")
        self.ComboBoxYearLevel_2.addItem("")
        self.ComboBoxYearLevel_2.addItem("")
        self.ComboBoxYearLevel_2.addItem("")
        self.ComboBoxYearLevel_2.addItem("")
        self.ComboBoxYearLevel_2.addItem("")
        self.ButtonSaveUpdate = QtWidgets.QPushButton(self.frame_6)
        self.ButtonSaveUpdate.setGeometry(QtCore.QRect(540, 340, 131, 22))
        self.ButtonSaveUpdate.setStyleSheet("background-color:rgb(177, 177, 177)")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/save.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.ButtonSaveUpdate.setIcon(icon4)
        self.ButtonSaveUpdate.setIconSize(QtCore.QSize(15, 15))
        self.ButtonSaveUpdate.setObjectName("ButtonSaveUpdate")
        self.ButtonCancelUpdate = QtWidgets.QPushButton(self.frame_6)
        self.ButtonCancelUpdate.setGeometry(QtCore.QRect(460, 340, 71, 22))
        self.ButtonCancelUpdate.setStyleSheet("background-color:rgb(177, 177, 177)")
        self.ButtonCancelUpdate.setIconSize(QtCore.QSize(15, 15))
        self.ButtonCancelUpdate.setObjectName("ButtonCancelUpdate")
        self.LineEditUpdateSearch = QtWidgets.QLineEdit(self.frame_6)
        self.LineEditUpdateSearch.setGeometry(QtCore.QRect(510, 20, 161, 20))
        self.LineEditUpdateSearch.setStyleSheet("border:1px solid black;background-color:white;color:black")
        self.LineEditUpdateSearch.setText("")
        self.LineEditUpdateSearch.setObjectName("LineEditUpdateSearch")
        self.ButtonUpdateSearch = QtWidgets.QPushButton(self.frame_6)
        self.ButtonUpdateSearch.setGeometry(QtCore.QRect(676, 19, 23, 22))
        self.ButtonUpdateSearch.setStyleSheet("background-color:rgb(177, 177, 177)")
        self.ButtonUpdateSearch.setText("")
        self.ButtonUpdateSearch.setIcon(icon1)
        self.ButtonUpdateSearch.setIconSize(QtCore.QSize(15, 15))
        self.ButtonUpdateSearch.setObjectName("ButtonUpdateSearch")
        self.LineEditDateOfBirth_2 = QtWidgets.QLineEdit(self.frame_6)
        self.LineEditDateOfBirth_2.setGeometry(QtCore.QRect(260, 210, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.LineEditDateOfBirth_2.setFont(font)
        self.LineEditDateOfBirth_2.setStyleSheet("background-color:white;color:black;border:1px solid black")
        self.LineEditDateOfBirth_2.setPlaceholderText(" Date of Birth")
        self.LineEditDateOfBirth_2.setObjectName("LineEditDateOfBirth_2")
        self.stackedWidget.addWidget(self.page_4)
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setObjectName("page_5")
        self.label_9 = QtWidgets.QLabel(self.page_5)
        self.label_9.setGeometry(QtCore.QRect(0, 0, 724, 81))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(38)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("background-color:rgb(19, 30, 50);color:white;border:1px solid black")
        self.label_9.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.frame_7 = QtWidgets.QFrame(self.page_5)
        self.frame_7.setGeometry(QtCore.QRect(0, 80, 724, 521))
        self.frame_7.setStyleSheet("border:1px solid black;background-color:rgb(216, 216, 216)")
        self.frame_7.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_7.setObjectName("frame_7")
        self.ButtonDeleteAll = QtWidgets.QPushButton(self.frame_7)
        self.ButtonDeleteAll.setGeometry(QtCore.QRect(240, 60, 81, 22))
        self.ButtonDeleteAll.setStyleSheet("background-color:rgb(177, 177, 177)")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("images/delete.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.ButtonDeleteAll.setIcon(icon5)
        self.ButtonDeleteAll.setIconSize(QtCore.QSize(15, 15))
        self.ButtonDeleteAll.setObjectName("ButtonDeleteAll")
        self.LineEditDeleteSearch = QtWidgets.QLineEdit(self.frame_7)
        self.LineEditDeleteSearch.setGeometry(QtCore.QRect(329, 61, 151, 20))
        self.LineEditDeleteSearch.setStyleSheet("border:1px solid black;background-color:white;color:black")
        self.LineEditDeleteSearch.setText("")
        self.LineEditDeleteSearch.setObjectName("LineEditDeleteSearch")
        self.ButtonDeleteSearch = QtWidgets.QPushButton(self.frame_7)
        self.ButtonDeleteSearch.setGeometry(QtCore.QRect(485, 60, 23, 22))
        self.ButtonDeleteSearch.setStyleSheet("background-color:rgb(177, 177, 177)")
        self.ButtonDeleteSearch.setText("")
        self.ButtonDeleteSearch.setIcon(QtGui.QIcon("images/search.png"))
        self.ButtonDeleteSearch.setIconSize(QtCore.QSize(15, 15))
        self.ButtonDeleteSearch.setObjectName("ButtonDeleteSearch")
        self.DeleteListWidget = QtWidgets.QListWidget(self.frame_7)
        self.DeleteListWidget.setGeometry(QtCore.QRect(170, 90, 401, 301))
        self.DeleteListWidget.setStyleSheet("color:black;border:2px solid black;background-color:white")
        self.DeleteListWidget.setObjectName("DeleteListWidget")
        self.stackedWidget.addWidget(self.page_5)
        self.StudentsTable.horizontalHeader().hide()
        self.StudentsTable.verticalHeader().hide()
        self.page_6 = QtWidgets.QWidget()
        self.page_6.setObjectName("page_6")
        self.label_10 = QtWidgets.QLabel(self.page_6)
        self.label_10.setGeometry(QtCore.QRect(0, 0, 724, 81))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(38)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("background-color:rgb(19, 30, 50);color:white;border:1px solid black")
        self.label_10.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.frame_8 = QtWidgets.QFrame(self.page_6)
        self.frame_8.setGeometry(QtCore.QRect(0, 80, 724, 461))
        self.frame_8.setStyleSheet("border:1px solid black;background-color:rgb(235, 235, 235)")
        self.frame_8.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_8.setObjectName("frame_8")
        self.ProgramsTable = QtWidgets.QTableWidget(self.frame_8)
        self.ProgramsTable.setGeometry(QtCore.QRect(20, 40, 681, 116))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.ProgramsTable.setFont(font)
        self.ProgramsTable.setStyleSheet("color:black;border:1px solid black;background-color:white")
        self.ProgramsTable.setObjectName("ProgramsTable")
        self.ProgramsTable.setColumnCount(3)
        self.ProgramsTable.setRowCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.ProgramsTable.setItem(2, 2, item)
        self.ProgramsTable.verticalHeader().setVisible(False)
        self.stackedWidget.addWidget(self.page_6)
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.ButtonViewPage.clicked.connect(lambda:self.stackedWidget.setCurrentIndex(1))
        self.ButtonAddPage.clicked.connect(lambda:self.stackedWidget.setCurrentIndex(2))
        self.ButtonUpdatePage.clicked.connect(lambda:self.stackedWidget.setCurrentIndex(3))
        self.ButtonDeletePage.clicked.connect(lambda:self.stackedWidget.setCurrentIndex(4))
        self.ButtonViewProgramsPage.clicked.connect(lambda:self.stackedWidget.setCurrentIndex(5))
        self.ButtonViewProgramsPage.clicked.connect(self.UpdateProgramTable)
        self.ProgramsTable.setColumnWidth(1,477)

        self.ButtonRegister.clicked.connect(self.AddStudent)
        self.CourseTrack()
        self.CourseTrack2()

        self.ComboBoxCourse.currentIndexChanged.connect(self.CheckCourse)
        self.ComboBoxCourse_2.currentIndexChanged.connect(self.CheckCourse2)
        self.ButtonViewAll.clicked.connect(self.ViewAllStudents)
        self.ButtonViewSearch.clicked.connect(self.ViewStudentName)

        self.ButtonViewPage.clicked.connect(self.ResetStudentTable)
        self.ButtonAddPage.clicked.connect(self.ResetStudentTable)
        self.ButtonUpdatePage.clicked.connect(self.ResetStudentTable)
        self.ButtonDeletePage.clicked.connect(self.ResetStudentTable)
        self.ButtonViewProgramsPage.clicked.connect(self.ResetStudentTable)

        self.ButtonViewPage.clicked.connect(lambda:self.DeleteListWidget.clear())
        self.ButtonAddPage.clicked.connect(lambda:self.DeleteListWidget.clear())
        self.ButtonUpdatePage.clicked.connect(lambda:self.DeleteListWidget.clear())
        self.ButtonDeletePage.clicked.connect(lambda:self.DeleteListWidget.clear())
        self.ButtonViewProgramsPage.clicked.connect(lambda:self.DeleteListWidget.clear())

        self.ButtonDeleteSearch.clicked.connect(self.ViewStudentDelete)
        self.DeleteListWidget.doubleClicked.connect(self.DeleteStudentWarning)
        self.ButtonDeleteAll.clicked.connect(self.DeleteAllStudentsWarning)

        self.ButtonUpdateSearch.clicked.connect(self.ShowUpdateStudent)
        self.ButtonSaveUpdate.clicked.connect(self.UpdateStudent)
        self.ButtonCancelUpdate.clicked.connect(self.ClearUpdate)
        self.ButtonCancelAdd.clicked.connect(self.ClearAdd)

 

        from PyQt6.QtWidgets import QMessageBox
        self.messagebox = QMessageBox()
        self.messagebox.setWindowIcon(QtGui.QIcon('images/ccmslogo.jpg'))
        self.messagebox.setWindowTitle(' ')
        self.messagebox.setIcon(QMessageBox.Icon.Information)
        self.messagebox.setText('Welcome Admin!')
        self.messagebox.setInformativeText('created by Eli Bautista')
        self.messagebox.show()
        
        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def ClearAdd(self):
                self.LineEditName.clear()
                self.LineEditContact.clear()
                self.LineEditEmail.clear()
                self.ComboBoxGender.setCurrentIndex(0)
                self.LineEditAge.clear()
                self.DateEditDateBirth.setDate(QtCore.QDate(2001,1,1))
                self.ComboBoxCourse.setCurrentIndex(0)
                self.ComboBoxSpecialTrack.setCurrentIndex(0)
                self.ComboBoxYearLevel.setCurrentIndex(0)
                self.TextEditAddress.clear()

    def ClearUpdate(self):
                self.LineEditName_2.clear()
                self.LineEditContact_2.clear()
                self.LineEditEmail_2.clear()
                self.ComboBoxGender_2.setCurrentIndex(0)
                self.LineEditAge_2.clear()
                self.LineEditDateOfBirth_2.clear()
                self.ComboBoxCourse_2.setCurrentIndex(0)
                self.ComboBoxSpecialTrack_2.setCurrentIndex(0)
                self.ComboBoxYearLevel_2.setCurrentIndex(0)
                self.TextEditAddress_2.clear()

    def ShowUpdateStudent(self):
            if len(self.LineEditUpdateSearch.text()) != 0:
                        import mysql.connector
                        DatabaseConnection = mysql.connector.connect(host = 'localhost',user = 'root', password = 'root',database = 'ccms_studentinfosystem')
                        DatabaseCursor = DatabaseConnection.cursor()       
                        
                        DatabaseCursor.execute(f'select * from studentinformationtb where Name = "{self.LineEditUpdateSearch.text()}"')
                        for row in DatabaseCursor.fetchall():
                                self.LineEditName_2.setText(str(row[1]))
                                self.LineEditContact_2.setText(str(row[2]))
                                self.LineEditEmail_2.setText(str(row[3]))
                                self.ComboBoxGender_2.setCurrentText(str(row[4]))
                                self.LineEditAge_2.setText(str(row[5]))
                                self.LineEditDateOfBirth_2.setText(str(row[6]))
                                self.ComboBoxCourse_2.setCurrentText(str(row[7]))
                                self.ComboBoxSpecialTrack_2.setCurrentText(str(row[8]))
                                self.ComboBoxYearLevel_2.setCurrentText(str(row[9]))
                                self.TextEditAddress_2.setPlainText(str(row[10]))
    def UpdateStudent(self):
            if len(self.LineEditUpdateSearch.text()) != 0 and self.ComboBoxSpecialTrack_2.currentText() != 'Select specialization track':
                        import mysql.connector
                        DatabaseConnection = mysql.connector.connect(host = 'localhost',user = 'root', password = 'root',database = 'ccms_studentinfosystem')
                        DatabaseCursor = DatabaseConnection.cursor()       

                        DatabaseCursor.execute(f'update studentinformationtb set Name = "{self.LineEditName_2.text()}", Contact = "{self.LineEditContact_2.text()}", Email = "{self.LineEditEmail_2.text()}", Gender = "{self.ComboBoxGender_2.currentText()}", Age = "{self.LineEditAge_2.text()}", Date_of_birth = "{self.LineEditDateOfBirth_2.text()}", Course = "{self.ComboBoxCourse_2.currentText()}", Track = "{self.ComboBoxSpecialTrack_2.currentText()}", \
YearLevel = "{self.ComboBoxYearLevel_2.currentText()}",Address = "{self.TextEditAddress_2.toPlainText()}" where Name = "{self.LineEditUpdateSearch.text()}"')

                        DatabaseConnection.commit()

                        from PyQt6.QtWidgets import QMessageBox
                        self.mbox = QMessageBox()
                        self.mbox.setWindowTitle(' ')
                        self.mbox.setWindowIcon(QtGui.QIcon("images/ccmslogo.jpg"))
                        self.mbox.setIcon(QMessageBox.Icon.Information)
                        self.mbox.setText('Update student success.')
                        self.mbox.show()        

    def DeleteStudentWarning(self):
                from PyQt6.QtWidgets import QMessageBox
                self.mbox = QMessageBox()
                self.mbox.setWindowIcon(QtGui.QIcon("images/ccmslogo.jpg"))
                self.mbox.setIcon(QMessageBox.Icon.Warning)
                self.mbox.setWindowTitle(' ')
                self.mbox.setText('Are you sure you want to permanently delete this student?')
                self.mbox.setInformativeText('You may not be able to recover this data/s.')
                self.mbox.setStandardButtons(QMessageBox.StandardButton.Cancel|QMessageBox.StandardButton.Yes)
                self.mbox.setDefaultButton(QMessageBox.StandardButton.Yes)
                self.mbox.buttonClicked.connect(self.DeleteStudent)
                self.mbox.show()

    def DeleteStudent(self, connection):
            if connection.text() == '&Yes':
                if len(self.DeleteListWidget.currentItem().text()) != 0:
                                Name = self.DeleteListWidget.currentItem().text()
                                import mysql.connector
                                DatabaseConnection = mysql.connector.connect(host = 'localhost',user = 'root', password = 'root',database = 'ccms_studentinfosystem')
                                DatabaseCursor = DatabaseConnection.cursor() 
                                DatabaseCursor.execute(f'delete from studentinformationtb where Name = "{Name}"')
                                DatabaseConnection.commit()
                                self.ViewStudentDelete()

                                DatabaseCursor.execute(f'select * from studentinformationtb where Name = "{Name}"')
                                for row in DatabaseCursor.fetchall():
                                        if row[7] == 'BSIT':
                                                        DatabaseCursor.execute(f'select * from studentinformationtb where Name = "{Name}"')
                                                        for row in DatabaseCursor.fetchall():
                                                                NewCount_2 = row[0] - 1
                                                                DatabaseCursor.execute(f'Update studentcountpercoursetb set BSIT_StudentCount = {NewCount_2}')
                                                                DatabaseConnection.commit()

                                        if row[7] == 'BSCS':
                                                        DatabaseCursor.execute(f'select * from studentinformationtb where Name = "{Name}"')
                                                        for row in DatabaseCursor.fetchall():
                                                                NewCount_2 = row[0] - 1
                                                                DatabaseCursor.execute(f'Update studentcountpercoursetb set BSCS_StudentCount = {NewCount_2}')
                                                                DatabaseConnection.commit()
                                        if row[7] == 'BSEMC':
                                                        DatabaseCursor.execute(f'select * from studentinformationtb where Name = "{Name}"')
                                                        for row in DatabaseCursor.fetchall():
                                                                NewCount_2 = row[0] - 1
                                                                DatabaseCursor.execute(f'Update studentcountpercoursetb set BSEMC_StudentCount = {NewCount_2}')
                                                                DatabaseConnection.commit()
    def DeleteAllStudentsWarning(self,connection):
                from PyQt6.QtWidgets import QMessageBox
                self.mbox = QMessageBox()
                self.mbox.setWindowIcon(QtGui.QIcon("images/ccmslogo.jpg"))
                self.mbox.setIcon(QMessageBox.Icon.Warning)
                self.mbox.setWindowTitle(' ')
                self.mbox.setText('Are you sure you want to permanently delete all student?')
                self.mbox.setInformativeText('You may not be able to recover this data/s.')
                self.mbox.setStandardButtons(QMessageBox.StandardButton.Cancel|QMessageBox.StandardButton.Yes)
                self.mbox.setDefaultButton(QMessageBox.StandardButton.Yes)
                self.mbox.buttonClicked.connect(self.DeleteAllStudents)
                self.mbox.show()
              
    
    def DeleteAllStudents(self, connection):
                if connection.text() == '&Yes':
                        import mysql.connector
                        DatabaseConnection = mysql.connector.connect(host = 'localhost',user = 'root', password = 'root',database = 'ccms_studentinfosystem')
                        DatabaseCursor = DatabaseConnection.cursor() 
                        DatabaseCursor.execute('delete from studentinformationtb')
                        DatabaseConnection.commit()
                        self.ViewStudentDelete()   

                        DatabaseCursor.execute('delete from studentcountpercoursetb')
                        DatabaseConnection.commit()

                        DatabaseCursor.execute('select * from StudentCountPerCourseTB')
                        StudentCount = 0
                        for sd in DatabaseCursor.fetchall():
                                StudentCount+=1
                        if StudentCount == 0:
                                DatabaseCursor.execute(f'insert into StudentCountPerCourseTB values({0},{0},{0})')
                                DatabaseConnection.commit()
                        
    
    def ViewStudentDelete(self):
        if len(self.LineEditDeleteSearch.text()) == 0:
                self.DeleteListWidget.clear()
                import mysql.connector
                DatabaseConnection = mysql.connector.connect(host = 'localhost',user = 'root', password = 'root',database = 'ccms_studentinfosystem')
                DatabaseCursor = DatabaseConnection.cursor() 
                DatabaseCursor.execute('select * from studentinformationtb')
                
                c = 0
                for row in DatabaseCursor.fetchall():
                        self.DeleteListWidget.insertItem(c,row[1])
                        c+= 1
        if len(self.LineEditDeleteSearch.text()) != 0:
                self.DeleteListWidget.clear()
                import mysql.connector
                DatabaseConnection = mysql.connector.connect(host = 'localhost',user = 'root', password = 'root',database = 'ccms_studentinfosystem')
                DatabaseCursor = DatabaseConnection.cursor() 
                DatabaseCursor.execute(f'select * from studentinformationtb where Name ="{self.LineEditDeleteSearch.text()}"')
                c = 0
                for row in DatabaseCursor.fetchall():
                        self.DeleteListWidget.insertItem(c,row[1])
                        c+= 1
  



    def ResetStudentTable(self):
            self.StudentsTable.clear()
            self.StudentsTable.setRowCount(0)

    def UpdateProgramTable(self):
                import mysql.connector
                DatabaseConnection = mysql.connector.connect(host = 'localhost',user = 'root', password = 'root',database = 'ccms_studentinfosystem')
                DatabaseCursor = DatabaseConnection.cursor() 

                DatabaseCursor.execute('select * from studentcountpercoursetb')
                for sd in DatabaseCursor.fetchall():
                        self.ProgramsTable.setItem(0,0,QtWidgets.QTableWidgetItem('BSIT'))
                        self.ProgramsTable.setItem(1,0,QtWidgets.QTableWidgetItem('BSCS'))
                        self.ProgramsTable.setItem(2,0,QtWidgets.QTableWidgetItem('BSEMC'))

                        self.ProgramsTable.setItem(0,1,QtWidgets.QTableWidgetItem('Bachelor of Science in Information Technology'))
                        self.ProgramsTable.setItem(1,1,QtWidgets.QTableWidgetItem('Bachelor of Science in Computer Science'))
                        self.ProgramsTable.setItem(2,1,QtWidgets.QTableWidgetItem('Bachelor of Science in Entertainment and Multimedia Computing'))

                        self.ProgramsTable.setItem(0,2,QtWidgets.QTableWidgetItem(str(sd[0])))
                        self.ProgramsTable.setItem(1,2,QtWidgets.QTableWidgetItem(str(sd[1])))
                        self.ProgramsTable.setItem(2,2,QtWidgets.QTableWidgetItem(str(sd[2])))

    def ViewAllStudents(self):
                import mysql.connector
                DatabaseConnection = mysql.connector.connect(host = 'localhost',user = 'root', password = 'root',database = 'ccms_studentinfosystem')
                DatabaseCursor = DatabaseConnection.cursor() 

                DatabaseCursor.execute('select * from studentinformationtb')   
                Student = DatabaseCursor.fetchall()

                Students = []
                r = 1
                c = 0
                a = 0
                for item in Student:
                        Students.append(item)
                        c += 1
                self.StudentsTable.setColumnCount(11)
                self.StudentsTable.setRowCount(c+1)

                self.StudentsTable.setItem(0,0,QtWidgets.QTableWidgetItem('ID'))  
                self.StudentsTable.setItem(0,1,QtWidgets.QTableWidgetItem('Name'))  
                self.StudentsTable.setItem(0,2,QtWidgets.QTableWidgetItem('Contact'))  
                self.StudentsTable.setItem(0,3,QtWidgets.QTableWidgetItem('Email'))  
                self.StudentsTable.setItem(0,4,QtWidgets.QTableWidgetItem('Gender'))  
                self.StudentsTable.setItem(0,5,QtWidgets.QTableWidgetItem('Age'))  
                self.StudentsTable.setItem(0,6,QtWidgets.QTableWidgetItem('Birthdate'))  
                self.StudentsTable.setItem(0,7,QtWidgets.QTableWidgetItem('Course'))  
                self.StudentsTable.setItem(0,8,QtWidgets.QTableWidgetItem('Track'))     
                self.StudentsTable.setItem(0,9,QtWidgets.QTableWidgetItem('Year'))  
                self.StudentsTable.setItem(0,10,QtWidgets.QTableWidgetItem('Address'))

                for x in range(c):
                        self.StudentsTable.setItem(r,0,QtWidgets.QTableWidgetItem(str(Student[a][0])))
                        self.StudentsTable.setItem(r,1,QtWidgets.QTableWidgetItem(str(Student[a][1])))
                        self.StudentsTable.setItem(r,2,QtWidgets.QTableWidgetItem(str(Student[a][2])))
                        self.StudentsTable.setItem(r,3,QtWidgets.QTableWidgetItem(str(Student[a][3])))
                        self.StudentsTable.setItem(r,4,QtWidgets.QTableWidgetItem(str(Student[a][4])))
                        self.StudentsTable.setItem(r,5,QtWidgets.QTableWidgetItem(str(Student[a][5])))
                        self.StudentsTable.setItem(r,6,QtWidgets.QTableWidgetItem(str(Student[a][6])))
                        self.StudentsTable.setItem(r,7,QtWidgets.QTableWidgetItem(str(Student[a][7])))
                        self.StudentsTable.setItem(r,8,QtWidgets.QTableWidgetItem(str(Student[a][8])))
                        self.StudentsTable.setItem(r,9,QtWidgets.QTableWidgetItem(str(Student[a][9])))
                        self.StudentsTable.setItem(r,10,QtWidgets.QTableWidgetItem(str(Student[a][10])))
                        r = r + 1
                        a = a + 1
                self.StudentsTable.setFont(QtGui.QFont('Helvetica ', 6))
                self.StudentsTable.setColumnWidth(0,10)
                self.StudentsTable.setColumnWidth(1,75)
                self.StudentsTable.setColumnWidth(2,60)
                self.StudentsTable.setColumnWidth(3,120)
                self.StudentsTable.setColumnWidth(4,35)
                self.StudentsTable.setColumnWidth(5,10)
                self.StudentsTable.setColumnWidth(6,47)
                self.StudentsTable.setColumnWidth(7,38)
                self.StudentsTable.setColumnWidth(8,75)
                self.StudentsTable.setColumnWidth(9,10)
                self.StudentsTable.setColumnWidth(10,140)
                  
    def ViewStudentName(self):
            if len(self.LineEditViewSearch.text()) != 0:
                import mysql.connector
                DatabaseConnection = mysql.connector.connect(host = 'localhost',user = 'root', password = 'root',database = 'ccms_studentinfosystem')
                DatabaseCursor = DatabaseConnection.cursor() 

                DatabaseCursor.execute('select * from studentinformationtb where Name = "%s"'.format(self.LineEditViewSearch.text()))   
                Student = DatabaseCursor.fetchall()

                Students = []
                r = 1
                c = 0
                a = 0
                for item in Student:
                        Students.append(item)
                        c += 1
                self.StudentsTable.setColumnCount(11)
                self.StudentsTable.setRowCount(c+1)

                self.StudentsTable.setItem(0,0,QtWidgets.QTableWidgetItem('ID'))  
                self.StudentsTable.setItem(0,1,QtWidgets.QTableWidgetItem('Name'))  
                self.StudentsTable.setItem(0,2,QtWidgets.QTableWidgetItem('Contact'))  
                self.StudentsTable.setItem(0,3,QtWidgets.QTableWidgetItem('Email'))  
                self.StudentsTable.setItem(0,4,QtWidgets.QTableWidgetItem('Gender'))  
                self.StudentsTable.setItem(0,5,QtWidgets.QTableWidgetItem('Age'))  
                self.StudentsTable.setItem(0,6,QtWidgets.QTableWidgetItem('Birthdate'))  
                self.StudentsTable.setItem(0,7,QtWidgets.QTableWidgetItem('Course'))  
                self.StudentsTable.setItem(0,8,QtWidgets.QTableWidgetItem('Track'))     
                self.StudentsTable.setItem(0,9,QtWidgets.QTableWidgetItem('Year'))  
                self.StudentsTable.setItem(0,10,QtWidgets.QTableWidgetItem('Address'))

                for x in range(c):
                        self.StudentsTable.setItem(r,0,QtWidgets.QTableWidgetItem(str(Student[a][0])))
                        self.StudentsTable.setItem(r,1,QtWidgets.QTableWidgetItem(str(Student[a][1])))
                        self.StudentsTable.setItem(r,2,QtWidgets.QTableWidgetItem(str(Student[a][2])))
                        self.StudentsTable.setItem(r,3,QtWidgets.QTableWidgetItem(str(Student[a][3])))
                        self.StudentsTable.setItem(r,4,QtWidgets.QTableWidgetItem(str(Student[a][4])))
                        self.StudentsTable.setItem(r,5,QtWidgets.QTableWidgetItem(str(Student[a][5])))
                        self.StudentsTable.setItem(r,6,QtWidgets.QTableWidgetItem(str(Student[a][6])))
                        self.StudentsTable.setItem(r,7,QtWidgets.QTableWidgetItem(str(Student[a][7])))
                        self.StudentsTable.setItem(r,8,QtWidgets.QTableWidgetItem(str(Student[a][8])))
                        self.StudentsTable.setItem(r,9,QtWidgets.QTableWidgetItem(str(Student[a][9])))
                        self.StudentsTable.setItem(r,10,QtWidgets.QTableWidgetItem(str(Student[a][10])))
                        r = r + 1
                        a = a + 1
                self.StudentsTable.setFont(QtGui.QFont('Helvetica ', 6))
                self.StudentsTable.setColumnWidth(0,10)
                self.StudentsTable.setColumnWidth(1,75)
                self.StudentsTable.setColumnWidth(2,60)
                self.StudentsTable.setColumnWidth(3,120)
                self.StudentsTable.setColumnWidth(4,35)
                self.StudentsTable.setColumnWidth(5,10)
                self.StudentsTable.setColumnWidth(6,47)
                self.StudentsTable.setColumnWidth(7,38)
                self.StudentsTable.setColumnWidth(8,75)
                self.StudentsTable.setColumnWidth(9,10)
                self.StudentsTable.setColumnWidth(10,140)


    def CourseTrack2(self):
            self.ComboBoxCourse_2.addItem('BSIT')
            self.ComboBoxCourse_2.addItem('BSCS')
            self.ComboBoxCourse_2.addItem('BSEMC')

    def CheckCourse2(self):
            if self.ComboBoxCourse_2.currentText() == 'Select Course':
                    self.ComboBoxSpecialTrack_2.clear()
                    self.ComboBoxSpecialTrack_2.addItem('Select specialization track')
            if self.ComboBoxCourse_2.currentText() == 'BSIT':
                    self.ComboBoxSpecialTrack_2.clear()
                    self.ComboBoxSpecialTrack_2.addItem('Select specialization track')
                    self.ComboBoxSpecialTrack_2.addItem('Web & Mobile Application')
                    self.ComboBoxSpecialTrack_2.addItem('CISCO Networking')

            if self.ComboBoxCourse.currentText() == 'BSCS':
                    self.ComboBoxSpecialTrack_2.clear()
                    self.ComboBoxSpecialTrack_2.addItem('Select specialization track')
                    self.ComboBoxSpecialTrack_2.addItem('Software Engineering')
                    self.ComboBoxSpecialTrack_2.addItem('Data Science')
                    
            if self.ComboBoxCourse_2.currentText() == 'BSEMC':        
                    self.ComboBoxSpecialTrack_2.clear()
                    self.ComboBoxSpecialTrack_2.addItem('Select specialization track')
                    self.ComboBoxSpecialTrack_2.addItem('Game Development')
                    self.ComboBoxSpecialTrack_2.addItem('Digital Animation Technology')


    def CourseTrack(self):
            self.ComboBoxCourse.addItem('BSIT')
            self.ComboBoxCourse.addItem('BSCS')
            self.ComboBoxCourse.addItem('BSEMC')
            
            self.ComboBoxCourse_2.addItem('BSIT')
            self.ComboBoxCourse_2.addItem('BSCS')
            self.ComboBoxCourse_2.addItem('BSEMC')

    def CheckCourse(self):
            if self.ComboBoxCourse.currentText() == 'Select Course':
                    self.ComboBoxSpecialTrack.clear()
                    self.ComboBoxSpecialTrack.addItem('Select specialization track')
            if self.ComboBoxCourse.currentText() == 'BSIT':
                    self.ComboBoxSpecialTrack.clear()
                    self.ComboBoxSpecialTrack.addItem('Select specialization track')
                    self.ComboBoxSpecialTrack.addItem('Web & Mobile Application')
                    self.ComboBoxSpecialTrack.addItem('CISCO Networking')

            if self.ComboBoxCourse.currentText() == 'BSCS':
                    self.ComboBoxSpecialTrack.clear()
                    self.ComboBoxSpecialTrack.addItem('Select specialization track')
                    self.ComboBoxSpecialTrack.addItem('Software Engineering')
                    self.ComboBoxSpecialTrack.addItem('Data Science')
                    
            if self.ComboBoxCourse.currentText() == 'BSEMC':        
                    self.ComboBoxSpecialTrack.clear()
                    self.ComboBoxSpecialTrack.addItem('Select specialization track')
                    self.ComboBoxSpecialTrack.addItem('Game Development')
                    self.ComboBoxSpecialTrack.addItem('Digital Animation Technology')



            if self.ComboBoxCourse_2.currentText() == 'Select Course':
                    self.ComboBoxSpecialTrack_2.clear()
                    self.ComboBoxSpecialTrack_2.addItem('Select specialization track')
            if self.ComboBoxCourse_2.currentText() == 'BSIT':
                    self.ComboBoxSpecialTrack_2.clear()
                    self.ComboBoxSpecialTrack_2.addItem('Select specialization track')
                    self.ComboBoxSpecialTrack_2.addItem('Web & Mobile Application')
                    self.ComboBoxSpecialTrack_2.addItem('CISCO Networking')

            if self.ComboBoxCourse.currentText() == 'BSCS':
                    self.ComboBoxSpecialTrack_2.clear()
                    self.ComboBoxSpecialTrack_2.addItem('Select specialization track')
                    self.ComboBoxSpecialTrack_2.addItem('Software Engineering')
                    self.ComboBoxSpecialTrack_2.addItem('Data Science')
                    
            if self.ComboBoxCourse_2.currentText() == 'BSEMC':        
                    self.ComboBoxSpecialTrack_2.clear()
                    self.ComboBoxSpecialTrack_2.addItem('Select specialization track')
                    self.ComboBoxSpecialTrack_2.addItem('Game Development')
                    self.ComboBoxSpecialTrack_2.addItem('Digital Animation Technology')

    def AddStudent(self):
            if len(self.LineEditName.text()) != 0 and len(self.LineEditContact.text()) != 0 and  len(self.LineEditEmail.text()) != 0 and self.ComboBoxGender.currentIndex() != 0 and len(self.LineEditAge.text()) != 0 and  self.ComboBoxCourse.currentText() != 'Select Course' and  self.ComboBoxSpecialTrack.currentText() != 'Select specialization track' and  self.ComboBoxYearLevel.currentText() != 'Select Year Level':
                import mysql.connector
                DatabaseConnection = mysql.connector.connect(host = 'localhost',user = 'root', password = 'root',database = 'ccms_studentinfosystem')
                DatabaseCursor = DatabaseConnection.cursor() 
                DatabaseCursor.execute('insert into studentinformationtb values(null,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)',(self.LineEditName.text(),self.LineEditContact.text(),self.LineEditEmail.text(),self.ComboBoxGender.currentText(),self.LineEditAge.text(),self.DateEditDateBirth.text(),self.ComboBoxCourse.currentText(),self.ComboBoxSpecialTrack.currentText(),self.ComboBoxYearLevel.currentText(),self.TextEditAddress.toPlainText()))
                DatabaseConnection.commit()
        
                if self.ComboBoxCourse.currentText() == 'BSIT' and self.ComboBoxSpecialTrack.currentText() != 'Select specialization track':
                        DatabaseCursor.execute('select * from studentcountpercoursetb')
                        for sd in DatabaseCursor.fetchall():
                                DatabaseCursor.execute(f'update studentcountpercoursetb set BSIT_StudentCount = {sd[0] + 1 }')
                                DatabaseConnection.commit()

                elif self.ComboBoxCourse.currentText() == 'BSCS' and self.ComboBoxSpecialTrack.currentText() != 'Select specialization track':
                        DatabaseCursor.execute('select * from studentcountpercoursetb')
                        for sd in DatabaseCursor.fetchall():
                                DatabaseCursor.execute(f'update studentcountpercoursetb set BSCS_StudentCount = {sd[1] + 1 }')
                                DatabaseConnection.commit()

                elif self.ComboBoxCourse.currentText() == 'BSEMC' and self.ComboBoxSpecialTrack.currentText() != 'Select specialization track':
                        DatabaseCursor.execute('select * from studentcountpercoursetb')
                        for sd in DatabaseCursor.fetchall():
                                DatabaseCursor.execute(f'update studentcountpercoursetb set BSEMC_StudentCount = {sd[2] + 1 }')
                                DatabaseConnection.commit()

                from PyQt6.QtWidgets import QMessageBox
                self.messagebox = QMessageBox()
                self.messagebox.setWindowIcon(QtGui.QIcon('images/ccmslogo.jpg'))
                self.messagebox.setWindowTitle(' ')
                self.messagebox.setIcon(QMessageBox.Icon.Information)
                self.messagebox.setText('Student has been successfully added to the database.')
                self.messagebox.show()

            else:
                from PyQt6.QtWidgets import QMessageBox
                self.messagebox = QMessageBox()
                self.messagebox.setWindowIcon(QtGui.QIcon('images/ccmslogo.jpg'))
                self.messagebox.setWindowTitle(' ')
                self.messagebox.setIcon(QMessageBox.Icon.Warning)
                self.messagebox.setText('Please fill all the fields.')
                self.messagebox.show()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CCMS Student Information System"))
        self.label.setText(_translate("MainWindow", "CCMS STUDENT\n"
"INFORMATION SYSTEM"))
        self.ButtonViewPage.setText(_translate("MainWindow", "VIEW STUDENTS"))
        self.ButtonAddPage.setText(_translate("MainWindow", "ADD STUDENTS"))
        self.ButtonUpdatePage.setText(_translate("MainWindow", "UPDATE STUDENT"))
        self.ButtonDeletePage.setText(_translate("MainWindow", "DELETE STUDENT"))
        self.ButtonViewProgramsPage.setText(_translate("MainWindow", "VIEW PROGRAMS"))
        self.label_3.setText(_translate("MainWindow", "College of Computing & Multimedia Studies\n"
"Student Information System"))
        self.label_5.setText(_translate("MainWindow", "created by Eli Bautista"))
        self.label_6.setText(_translate("MainWindow", "VIEW STUDENTS"))
        self.LineEditViewSearch.setPlaceholderText(_translate("MainWindow", " Search Student "))
        self.ButtonViewAll.setText(_translate("MainWindow", "View all"))
        self.LineEditName.setPlaceholderText(_translate("MainWindow", " Name"))
        self.TextEditAddress.setPlaceholderText(_translate("MainWindow", " Address"))
        self.ComboBoxGender.setItemText(0, _translate("MainWindow", " Select Gender"))
        self.ComboBoxGender.setItemText(1, _translate("MainWindow", "Male"))
        self.ComboBoxGender.setItemText(2, _translate("MainWindow", "Female"))
        self.label_12.setText(_translate("MainWindow", "Date of Birth"))
        self.ComboBoxCourse.setItemText(0, _translate("MainWindow", "Select Course"))
        self.ComboBoxSpecialTrack.setItemText(0, _translate("MainWindow", " Select Specialization Track"))
        self.ComboBoxYearLevel.setItemText(0, _translate("MainWindow", "Select Year Level"))
        self.ComboBoxYearLevel.setItemText(1, _translate("MainWindow", "1"))
        self.ComboBoxYearLevel.setItemText(2, _translate("MainWindow", "2"))
        self.ComboBoxYearLevel.setItemText(3, _translate("MainWindow", "3"))
        self.ComboBoxYearLevel.setItemText(4, _translate("MainWindow", "4"))
        self.ButtonRegister.setText(_translate("MainWindow", "Register Student"))
        self.ButtonCancelAdd.setText(_translate("MainWindow", "Cancel"))
        self.label_7.setText(_translate("MainWindow", "ADD STUDENT"))
        self.label_8.setText(_translate("MainWindow", "UPDATE STUDENT"))
        self.LineEditName_2.setPlaceholderText(_translate("MainWindow", " Name"))
        self.TextEditAddress_2.setPlaceholderText(_translate("MainWindow", " Address"))
        self.ComboBoxGender_2.setItemText(0, _translate("MainWindow", " Select Gender"))
        self.ComboBoxGender_2.setItemText(1, _translate("MainWindow", "Male"))
        self.ComboBoxGender_2.setItemText(2, _translate("MainWindow", "Female"))
        self.ComboBoxCourse_2.setItemText(0, _translate("MainWindow", "Select Course"))
        self.ComboBoxSpecialTrack_2.setItemText(0, _translate("MainWindow", " Select Specialization Track"))
        self.ComboBoxYearLevel_2.setItemText(0, _translate("MainWindow", "Select Year Level"))
        self.ComboBoxYearLevel_2.setItemText(1, _translate("MainWindow", "1"))
        self.ComboBoxYearLevel_2.setItemText(2, _translate("MainWindow", "2"))
        self.ComboBoxYearLevel_2.setItemText(3, _translate("MainWindow", "3"))
        self.ComboBoxYearLevel_2.setItemText(4, _translate("MainWindow", "4"))
        self.ButtonSaveUpdate.setText(_translate("MainWindow", "Save Changes"))
        self.ButtonCancelUpdate.setText(_translate("MainWindow", "Cancel"))
        self.LineEditUpdateSearch.setPlaceholderText(_translate("MainWindow", " Search student to update"))
        self.label_9.setText(_translate("MainWindow", "DELETE STUDENT"))
        self.ButtonDeleteAll.setText(_translate("MainWindow", "Delete All"))
        self.LineEditDeleteSearch.setPlaceholderText(_translate("MainWindow", "Search student to delete"))
        self.label_10.setText(_translate("MainWindow", "VIEW PROGRAMS"))
        item = self.ProgramsTable.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "New Row"))
        item = self.ProgramsTable.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "New Row"))
        item = self.ProgramsTable.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "New Row"))
        item = self.ProgramsTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Program"))
        item = self.ProgramsTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Description"))
        item = self.ProgramsTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "No. of Students"))
        __sortingEnabled = self.ProgramsTable.isSortingEnabled()
        self.ProgramsTable.setSortingEnabled(False)
        item = self.ProgramsTable.item(0, 0)
        item.setText(_translate("MainWindow", "BSIT"))
        item = self.ProgramsTable.item(0, 1)
        item.setText(_translate("MainWindow", "Bachelor of Science in Information Technology"))
        item = self.ProgramsTable.item(0, 2)
        item.setText(_translate("MainWindow", "0"))
        item = self.ProgramsTable.item(1, 0)
        item.setText(_translate("MainWindow", "BSCS"))
        item = self.ProgramsTable.item(1, 1)
        item.setText(_translate("MainWindow", "Bachelor of Science in Computer Science"))
        item = self.ProgramsTable.item(1, 2)
        item.setText(_translate("MainWindow", "0"))
        item = self.ProgramsTable.item(2, 0)
        item.setText(_translate("MainWindow", "BSEMC"))
        item = self.ProgramsTable.item(2, 1)
        item.setText(_translate("MainWindow", "Bachelor of Science in Entertainment and Multimedia Computing"))
        item = self.ProgramsTable.item(2, 2)
        item.setText(_translate("MainWindow", "0"))
        self.ProgramsTable.setSortingEnabled(__sortingEnabled)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
